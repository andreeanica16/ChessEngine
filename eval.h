#ifndef LADYBUGS_EVAL_H
#define LADYBUGS_EVAL_H
#include "codifications.h"
#include "engine.h"
#define pawnValue 100
#define knightValue 320
#define bishopValue 330
#define rookValue 500
#define queenValue 900
#define kingValue 20000
#define gameStateEnd 2
#define gameStateMiddle 1

inline vector<int> pieceValues{0, queenValue, bishopValue, knightValue, rookValue,
                               pawnValue, queenValue, 0, 0, 0, kingValue};

inline int blackPawnSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, 50, 50, 50, 50, 50, 50, 50, 50},
                {0, 10, 10, 20, 30, 30, 20, 10, 10},
                {0, 5,  5, 10, 25, 25, 10,  5,  5},
                {0, 0,  0,  0, 20, 20,  0,  0,  0},
                {0, 5, -5,-10,  0,  0,-10, -5,  5},
                {0, 5, 10, 10,-20,-20, 10, 10,  5},
                {0, 0,  0,  0,  0,  0,  0,  0,  0}
        };

inline int whitePawnSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, 5, 10, 10,-20,-20, 10, 10,  5},
                {0, 5, -5,-10,  0,  0,-10, -5,  5},
                {0, 0,  0,  0, 20, 20,  0,  0,  0},
                {0, 5,  5, 10, 25, 25, 10,  5,  5},
                {0, 10, 10, 20, 30, 30, 20, 10, 10},
                {0, 50, 50, 50, 50, 50, 50, 50, 50},
                {0, 0,  0,  0,  0,  0,  0,  0,  0}
        };

inline int blackKnightSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, -50,-40,-30,-30,-30,-30,-40,-50},
                {0,-40,-20,  0,  0,  0,  0,-20,-40},
                {0, -30,  0, 10, 15, 15, 10,  0,-30},
                {0, -30,  5, 15, 20, 20, 15,  5,-30},
                {0, -30,  0, 15, 20, 20, 15,  0,-30},
                {0, -30,  5, 10, 15, 15, 10,  5,-30},
                {0, -40,-20,  0,  5,  5,  0,-20,-40},
                {0, -50,-40,-30,-30,-30,-30,-40,-50},
        };

inline int whiteKnightSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, -50,-40,-30,-30,-30,-30,-40,-50},
                {0, -40,-20,  0,  5,  5,  0,-20,-40},
                {0, -30,  5, 10, 15, 15, 10,  5,-30},
                {0, -30,  0, 15, 20, 20, 15,  0,-30},
                {0, -30,  5, 15, 20, 20, 15,  5,-30},
                {0, -30,  0, 10, 15, 15, 10,  0,-30},
                {0, -40,-20,  0,  0,  0,  0,-20,-40},
                {0, -50,-40,-30,-30,-30,-30,-40,-50}
        };

inline int blackBishopSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, -20,-10,-10,-10,-10,-10,-10,-20},
                {0, -10,  0,  0,  0,  0,  0,  0,-10},
                {0, -10,  0,  5, 10, 10,  5,  0,-10},
                {0, -10,  5,  5, 10, 10,  5,  5,-10},
                {0, -10,  0, 10, 10, 10, 10,  0,-10},
                {0, -10, 10, 10, 10, 10, 10, 10,-10},
                {0, -10,  5,  0,  0,  0,  0,  5,-10},
                {0, -20,-10,-10,-10,-10,-10,-10,-20}
        };

inline int whiteBishopSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, -20,-10,-10,-10,-10,-10,-10,-20},
                {0, -10,  5,  0,  0,  0,  0,  5,-10},
                {0, -10, 10, 10, 10, 10, 10, 10,-10},
                {0, -10,  0, 10, 10, 10, 10,  0,-10},
                {0, -10,  5,  5, 10, 10,  5,  5,-10},
                {0, -10,  0,  5, 10, 10,  5,  0,-10},
                {0, -10,  0,  0,  0,  0,  0,  0,-10},
                {0, -20,-10,-10,-10,-10,-10,-10,-20}
        };

inline int blackRookSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, 5, 10, 10, 10, 10, 10, 10,  5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, 0,  0,  0,  5,  5,  0,  0,  0}
        };

inline int whiteRookSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, 0,  0,  0,  5,  5,  0,  0,  0},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, -5,  0,  0,  0,  0,  0,  0, -5},
                {0, 5, 10, 10, 10, 10, 10, 10,  5},
                {0, 0,  0,  0,  0,  0,  0,  0,  0}
        };

inline int blackQueenSquareTable[9][9] =
        {
                {0, 0,  0,  0,  0,  0,  0,  0,  0},
                {0, -20,-10,-10, -5, -5,-10,-10,-20},
                {0, -10,  0,  0,  0,  0,  0,  0,-10},
                {0, -10,  0,  5,  5,  5,  5,  0,-10},
                {0, -5,  0,  5,  5,  5,  5,  0, -5},
                {0, 0,  0,  5,  5,  5,  5,  0, -5},
                {0, -10,  5,  5,  5,  5,  5,  0,-10},
                {0, -10,  0,  5,  0,  0,  0,  0,-10},
                {0, -20,-10,-10, -5, -5,-10,-10,-20}
        };

inline int whiteQueenSquareTable[9][9] =
        {
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0,-20,-10,-10, -5, -5,-10,-10,-20},
                {0,-10,  0,  5,  0,  0,  0,  0,-10},
                {0,-10,  5,  5,  5,  5,  5,  0,-10},
                {0, 0,  0,  5,  5,  5,  5,  0, -5},
                {0,-5,  0,  5,  5,  5,  5,  0, -5},
                {0,-10,  0,  5,  5,  5,  5,  0,-10},
                {0,-10,  0,  0,  0,  0,  0,  0,-10},
                {0,-20,-10,-10, -5, -5,-10,-10,-20},
        };

inline int blackKingMiddleGameSquareTable[9][9] =
        {
                {0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {0,-30,-40,-40,-50,-50,-40,-40,-30},
                {0,-30,-40,-40,-50,-50,-40,-40,-30},
                {0,-30,-40,-40,-50,-50,-40,-40,-30},
                {0,-30,-40,-40,-50,-50,-40,-40,-30},
                {0,-20,-30,-30,-40,-40,-30,-30,-20},
                {0,-10,-20,-20,-20,-20,-20,-20,-10},
                {0, 20, 20,  0,  0,  0,  0, 20, 20},
                {0,20, 30, 10,  0,  0, 10, 30, 20},
        };



inline int whiteKingMiddleGameSquareTable[9][9] =
        {
                {0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {0, 20, 30, 10,  0,  0, 10, 30, 20},
                {0, 20, 20,  0,  0,  0,  0, 20, 20},
                {0, -10,-20,-20,-20,-20,-20,-20,-10},
                {0, -20,-30,-30,-40,-40,-30,-30,-20},
                {0, -30,-40,-40,-50,-50,-40,-40,-30},
                {0, -30,-40,-40,-50,-50,-40,-40,-30},
                {0, -30,-40,-40,-50,-50,-40,-40,-30},
                {0, -30,-40,-40,-50,-50,-40,-40,-30}
        };



inline int blackKingEndGameSquareTable[9][9] =
        {
                {0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {0, -50,-40,-30,-20,-20,-30,-40,-50},
                {0, -30,-20,-10,  0,  0,-10,-20,-30},
                {0, -30,-10, 20, 30, 30, 20,-10,-30},
                {0, -30,-10, 30, 40, 40, 30,-10,-30},
                {0, -30,-10, 30, 40, 40, 30,-10,-30},
                {0, -30,-10, 20, 30, 30, 20,-10,-30},
                {0, -30,-30,  0,  0,  0,  0,-30,-30},
                {0, -50,-30,-30,-30,-30,-30,-30,-50}
        };



inline int whiteKingEndGameSquareTable[9][9] =
        {
                {0, 0, 0, 0, 0, 0, 0, 0, 0 },
                {0,-50,-30,-30,-30,-30,-30,-30,-50},
                {0,-30,-30,  0,  0,  0,  0,-30,-30},
                {0,-30,-10, 20, 30, 30, 20,-10,-30},
                {0,-30,-10, 30, 40, 40, 30,-10,-30},
                {0,-30,-10, 30, 40, 40, 30,-10,-30},
                {0,-30,-10, 20, 30, 30, 20,-10,-30},
                {0,-30,-20,-10,  0,  0,-10,-20,-30},
                {0,-50,-40,-30,-20,-20,-30,-40,-50}
        };

// applies minimax with alpha beta pruning, returns
// (score, (piece, (rowTo, colTo)))
pair<int, pair<int, pair<int, int>>> minimax_alphaBeta(int color, int alpha, int beta, int depth);

// evaluates current state for color and returns score
int evaluate(int color);

// calculates score for each piece as
// pieceValue * (myPieces - opponentPieces) +
// each piece's position correlated-value
int calculateScore(vector<int> &myPiecesOfType, int opponentPieces,
                   int pieceValue, int values[9][9]);
#endif //LADYBUGS_EVAL_H
